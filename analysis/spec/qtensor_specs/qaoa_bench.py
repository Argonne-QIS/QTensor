# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/QAOA_bench.ipynb (unless otherwise specified).

__all__ = ['qaoa_energy_tws', 'qaoa_energy_max_tws', 'qaoa_energy_med_tws', 'qaoa_energy_min_tws', 'qaoa_simulate']

# Cell
from cartesian_explorer import caches
from cartesian_explorer import parallels

ex.set_cache(cache=caches.JobLibCache(cachedir='../../data/cache/qaoa_bench'))

@ex.provider
def qaoa_energy_tws(graph, p, ordering_algo='greedy', composer_type='cone'):
    twidths = toolbox.qaoa_energy_tw_from_graph(graph, p, ordering_algo=ordering_algo, composer_type=composer_type)
    return tuple(twidths)

# Cell

@ex.provider
def qaoa_energy_max_tws(qaoa_energy_tws):
    return max(qaoa_energy_tws)

@ex.provider
def qaoa_energy_med_tws(qaoa_energy_tws):
    return np.median(qaoa_energy_tws)

@ex.provider
def qaoa_energy_min_tws(qaoa_energy_tws):
    return np.min(qaoa_energy_tws)



# Cell

from qtensor_specs import cli, click

@click.option('-B', '--backend', default='numpy')
@click.option('-M', '--max-memory', default=3e8)
@click.option('-s', '--seed', default=SEED)
@click.option('-O', '--ordering_algo', default='greedy'
              ,help=("One of (greedy, tamaki, tamaki_{wait_time})"
                     "'tamaki_15' means heuristic solver running for 15 seconds per graph"
                    )
             )
def qaoa_simulate(backend='numpy', seed=108
                  max_memory=1e8,
                  ordering_algo='greedy',
                 ):

